(defvar gnu-url          "http://elpa.gnu.org/packages/")
(defvar melpa-url        "http://melpa.org/packages/")
(defvar melpa-stable-url "http://stable.melpa.org/packages/")
(defvar org-url          "http://orgmode.org/elpa/")
;; (defvar marmalade-url "http://marmalade-repo.org/packages/")

(defvar use-package-list
  '(
    init-loader
    all-the-icons-ivy
    auto-highlight-symbol
    company
    counsel
    counsel-etags
    ctags-update
    exec-path-from-shell
    flycheck
    flycheck-golangci-lint
    flycheck-rust
    go-mode
    js2-highlight-vars
    js2-mode
    js2-refactor
    magit
    markdown-mode
    multiple-cursors
    package-utils
    racer
    undo-tree
    web-mode
    all-the-icons
    async
    bind-key
    dash
    epl
    f
    ghub
    git-commit
    ivy
    magit-popup
    memoize
    pkg-info
    pos-tip
    restart-emacs
    rust-mode
    s
    swiper
    use-package
    with-editor
    yasnippet
    scala-mode
    ruby-block
    org-tree-slide
    foreign-regexp
    ruby-additional
    )
)

(require 'package)
(add-to-list 'package-archives '("gnu"          . gnu-url)          t)
(add-to-list 'package-archives '("melpa"        . melpa-url)        t)
(add-to-list 'package-archives '("melpa-stable" . melpa-stable-url) t)
(add-to-list 'package-archives '("org"          . org-url)          t)
(package-initialize)

;;; 未インストールのパッケージを探す
(require 'cl)
(let ((not-installed
       (loop for x in use-package-list
             when (not (package-installed-p x)) collect x)))
  (when not-installed
    (package-refresh-contents)
    (dolist
        (pkg not-installed)
        (package-install pkg))))

;;; 各パッケージの設定ファイルはinits以下に置く．init-loaderがそれを読み込む
;;; ファイル命名規則が存在する (例 : 10-hoge.el)
(when (require 'init-loader nil t)
  (setq init-loader-show-log-after-init 'error-only)
  (when (file-directory-p (symbol-value 'hp-inits-dir))
    (init-loader-load hp-inits-dir)))

(set-locale-environment nil)
(set-language-environment "Japanese")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)

(unless (require 'use-package nil t)
  (defmacro use-package (&rest args)))

;; .rb ファイルの1行目にマジックコメントを自動挿入しない
(setq ruby-insert-encoding-magic-comment nil)

;; スタートアップメッセージを表示させない
(setq inhibit-startup-message t)

;; バックアップファイルを作成させない
(setq make-backup-files nil)

;; 終了時にオートセーブファイルを削除する
(setq delete-auto-save-files t)

;; タブにスペースを使用する
(setq-default tab-width 2 indent-tabs-mode nil)

;; 閉じ括弧を補完する
(electric-pair-mode 1)

;; 改行コードを表示する
(setq eol-mnemonic-dos "(CRLF)")
(setq eol-mnemonic-mac "(CR)")
(setq eol-mnemonic-unix "(LF)")

;; 複数ウィンドウを禁止する
(setq ns-pop-up-frames nil)

;; ウィンドウを透明にする
;; アクティブウィンドウ／非アクティブウィンドウ（alphaの値で透明度を指定）
(add-to-list 'default-frame-alist '(alpha . (0.85 0.85)))

;; メニューバーを消す
(menu-bar-mode -1)

;; 列数を表示する
(column-number-mode t)

;; 行数を表示する
(global-linum-mode t)
(setq linum-format "%5d")
(set-face-attribute 'linum nil
                    :foreground "#a9a9a9"
                    :height 0.9)

;; カーソルの点滅をやめる
(blink-cursor-mode t)

;; Enable company-mode
(global-company-mode 1)

(use-package xclip)
(use-package ruby-mode)
(use-package slim-mode)

(show-paren-mode 1)
(setq show-paren-style 'mixed)
(set-face-background 'show-paren-match-face "grey")
(set-face-foreground 'show-paren-match-face "black")
(setq scroll-conservatively 1)

;; Set scroll margin
(setq scroll-margin 20)

;; Set screen context lines
(setq next-screen-context-lines 5)

;; C-kで行全体を削除する
(setq kill-whole-line t)

;;; dired設定
(require 'dired-x)

;; "yes or no" の選択を "y or n" にする
(fset 'yes-or-no-p 'y-or-n-p)

(require 'linum)
(global-linum-mode)

;; elisp 設定
(add-to-list 'load-path "~/.emacs.d/elisp")
                                        ;(require 'install-elisp)
                                        ;(setq install-elisp-repository-directory "~/.emacs.d/elisp")

                                        ;(require 'grep-edit)

(setq load-path
      (append '(
                "~/.emacs.d/conf"
                ) load-path))

(load "font-init")     ;; フォントの設定
(load "org-init")      ;; org-modeの設定
(load "anything-init") ;; anything.elの設定

(require 'ido)
(ido-mode t)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(tabbar-mode 1)
(tabbar-mwheel-mode -1)
(setq tabbar-buffer-groups-function nil)
(setq tabbar-use-images nil)
(global-set-key (kbd "M-<right>") 'tabbar-forward-tab)
(global-set-key (kbd "M-<left>") 'tabbar-backward-tab)

;; company 設定
(require 'company)
(global-company-mode) ; 全バッファで有効にする
(setq company-idle-delay 0) ; デフォルトは0.5
(setq company-minimum-prefix-length 2) ; デフォルトは4
(setq company-selection-wrap-around t) ; 候補の一番下でさらに下に行こうとすると一番上に戻る

(define-key company-active-map (kbd "M-n") nil)
(define-key company-active-map (kbd "M-p") nil)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-h") nil)

(defun company--insert-candidate2 (candidate)
  (when (> (length candidate) 0)
    (setq candidate (substring-no-properties candidate))
    (if (eq (company-call-backend 'ignore-case) 'keep-prefix)
        (insert (company-strip-prefix candidate))
      (if (equal company-prefix candidate)
          (company-select-next)
        (delete-region (- (point) (length company-prefix)) (point))
        (insert candidate))
      )))

(defun company-complete-common2 ()
  (interactive)
  (when (company-manual-begin)
    (if (and (not (cdr company-candidates))
             (equal company-common (car company-candidates)))
        (company-complete-selection)
      (company--insert-candidate2 company-common))))

(define-key company-active-map [tab] 'company-complete-common2)
(define-key company-active-map [backtab] 'company-select-previous) ; おまけ


(set-face-attribute 'company-tooltip nil
                    :foreground "black" :background "lightgrey")
(set-face-attribute 'company-tooltip-common nil
                    :foreground "black" :background "lightgrey")
(set-face-attribute 'company-tooltip-common-selection nil
                    :foreground "white" :background "steelblue")
(set-face-attribute 'company-tooltip-selection nil
                    :foreground "black" :background "steelblue")
(set-face-attribute 'company-preview-common nil
                    :background nil :foreground "lightgrey" :underline t)
(set-face-attribute 'company-scrollbar-fg nil
                    :background "orange")
(set-face-attribute 'company-scrollbar-bg nil
                    :background "gray40")

(define-key company-active-map (kbd "C-s") 'company-filter-candidates)

(global-set-key (kbd "C-M-i") 'company-complete)

;; C-n, C-pで補完候補を次/前の候補を選択
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-search-map (kbd "C-n") 'company-select-next)
(define-key company-search-map (kbd "C-p") 'company-select-previous)

;; C-sで絞り込む
(define-key company-active-map (kbd "C-s") 'company-filter-candidates)

;; TABで候補を設定
(define-key company-active-map (kbd "C-i") 'company-complete-selection)

;; 各種メジャーモードでも C-M-iで company-modeの補完を使う
(define-key emacs-lisp-mode-map (kbd "C-M-i") 'company-complete)

(ivy-mode 1)

(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

;; git の root などを取得する関数
(defun chomp (str)
  (replace-regexp-in-string "[\n\r]+$" "" str))

;; git
(defun git-project-p ()
  (string=
   (chomp
    (shell-command-to-string "git rev-parse --is-inside-work-tree"))
   "true"))

(defun git-root-directory ()
  (cond ((git-project-p)
         (chomp
          (shell-command-to-string "git rev-parse --show-toplevel")))
        (t
         "")))

;; get current path
(defun get-current-path ()
  buffer-file-name)

;; git grep
(defun git-grep (grep-dir command-args)
  (interactive
   (let ((root (concat (git-root-directory) (get-current-path))))
     (list
      (read-file-name
       "Directory for git grep: " root root t)
      (read-shell-command
       "Run git-grep (like this): "
       (format "PAGER='' git grep -I -n -i -e %s"
               "")
       'git-grep-history))))
  (let ((grep-use-null-device nil)
        (command
         (format (concat
                  "cd %s && "
                  "%s")
                 grep-dir
                 command-args)))
    (grep command)))

;; enable cua-mode (which kaizen rectangle mode)
(cua-mode t)
(setq cua-enable-cua-keys nil) ; デフォルトキーバインドを無効化
(define-key global-map (kbd "C-x SPC") 'cua-set-rectangle-mark)

;; delete trailing whitespace before save
(add-hook 'before-save-hook
          '(lambda ()
             (delete-trailing-whitespace)
             (indent-region (point-min) (point-max))))

;; get rid of backup files
(setq make-backup-files nil)

;; assign 'undo' to C-z
(define-key global-map (kbd "C-z") 'undo)

;; M-f で単語の直前ではなく単語の先頭にカーソルが来るようにする
(defun forward-word+1 ()
  (interactive)
  (forward-word)
  (forward-char))

;; M-f が何故か効かないので苦肉の策
(define-key global-map (kbd "C-M-f") 'forward-word+1)

;; magit shortcut
(global-set-key (kbd "C-x g") 'magit-status)

;; enable undo-tree
(when (require 'undo-tree nil t)
  (global-undo-tree-mode))

;; enable js2-mode
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

;; color-moccur  (ELPA)
(require 'color-moccur)
(global-set-key (kbd "M-o") 'occur-by-moccur)
(setq moccur-split-word t)
(setq moccur-use-migemo t)

;; enable rust-mode
(require 'rust-mode)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

;; enable flycheck-rust
(require 'flycheck-rust)

;; enable racer (rust_code_complete_plugin)
(add-hook 'rust-mode-hook 'racer-mode)
(add-hook 'racer-mode-hook 'eldoc-mode)
(add-hook 'racer-mode-hook 'company-mode)

(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)

;; eval-buffer shortcut
(global-set-key (kbd "C-x C-e") 'eval-buffer)

;; quickrun shortcut
(global-set-key (kbd "C-x C-q") 'quickrun)

;; ruby-mode-settings
(autoload 'ruby-mode "ruby-mode"
  "Mode for editing ruby source files" t)
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("[Rr]akefile$" . ruby-mode))

(require 'auto-highlight-symbol)
(global-auto-highlight-symbol-mode t)

(autoload 'robe-mode "robe" "Code navigation, documentation lookup and completion for Ruby" t nil)
(autoload 'robe-ac-setup "robe-ac" "robe auto-complete" nil nil)
(add-hook 'robe-mode-hook 'robe-ac-setup)

(require 'yasnippet)
(yas/load-directory "~/.emacs.d/snippets")
(yas-global-mode 1)

;; 既存スニペットを挿入する
(define-key yas-minor-mode-map (kbd "C-x i i") 'yas-insert-snippet)
;; 新規スニペットを作成するバッファを用意する
(define-key yas-minor-mode-map (kbd "C-x i n") 'yas-new-snippet)
;; 既存スニペットを閲覧・編集する
(define-key yas-minor-mode-map (kbd "C-x i v") 'yas-visit-snippet-file)

(require 'rubocop)
(add-hook 'ruby-mode-hook 'rubocop-mode)

(flycheck-define-checker ruby-rubocop
  "A Ruby syntax and style checker using the RuboCop tool."
  :command ("rubocop" "--format" "emacs" "--silent"
            (config-file "--config" flycheck-rubocoprc)
            source)
  :error-patterns
  ((warning line-start
            (file-name) ":" line ":" column ": " (or "C" "W") ": " (message)
            line-end)
   (error line-start
          (file-name) ":" line ":" column ": " (or "E" "F") ": " (message)
          line-end))
  :modes (ruby-mode motion-mode))


;; (require 'pry)
;; optional suggestions
;; (global-set-key [S-f9] 'pry-intercept)
;; (global-set-key [f9] 'pry-intercept-rerun)

(define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))

(add-hook 'before-save-hook
          '(lambda ()
             (delete-trailing-whitespace)
             (indent-region (point-min) (point-max))))

;; enable typescript-mode
(require 'typescript-mode)
(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
(setq typescript-indent-level 2)

(require 'tide)
(add-hook 'typescript-mode-hook
          (lambda ()
            (tide-setup)
            (flycheck-mode t)
            (setq flycheck-check-syntax-automatically '(save mode-enabled))
            (eldoc-mode t)
            (company-mode-on)))

(define-key dired-mode-map (kbd "C-x e") (quote wdired-change-to-wdired-mode))
